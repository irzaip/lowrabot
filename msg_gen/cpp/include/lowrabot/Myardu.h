/* Auto-generated by genmsg_cpp for file /home/ros/ros_workspace/lowrabot/msg/Myardu.msg */
#ifndef LOWRABOT_MESSAGE_MYARDU_H
#define LOWRABOT_MESSAGE_MYARDU_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace lowrabot
{
template <class ContainerAllocator>
struct Myardu_ {
  typedef Myardu_<ContainerAllocator> Type;

  Myardu_()
  : ab_dir(0)
  , kk_dir(0)
  , ab_val(0)
  , kk_val(0)
  , joy1(0)
  , joy2(0)
  , joy3(0)
  , joy4(0)
  , joy5(0)
  , joy6(0)
  , joy7(0)
  , joy8(0)
  , joy9(0)
  , joy10(0)
  {
  }

  Myardu_(const ContainerAllocator& _alloc)
  : ab_dir(0)
  , kk_dir(0)
  , ab_val(0)
  , kk_val(0)
  , joy1(0)
  , joy2(0)
  , joy3(0)
  , joy4(0)
  , joy5(0)
  , joy6(0)
  , joy7(0)
  , joy8(0)
  , joy9(0)
  , joy10(0)
  {
  }

  typedef uint16_t _ab_dir_type;
  uint16_t ab_dir;

  typedef uint16_t _kk_dir_type;
  uint16_t kk_dir;

  typedef uint16_t _ab_val_type;
  uint16_t ab_val;

  typedef uint16_t _kk_val_type;
  uint16_t kk_val;

  typedef uint16_t _joy1_type;
  uint16_t joy1;

  typedef uint16_t _joy2_type;
  uint16_t joy2;

  typedef uint16_t _joy3_type;
  uint16_t joy3;

  typedef uint16_t _joy4_type;
  uint16_t joy4;

  typedef uint16_t _joy5_type;
  uint16_t joy5;

  typedef uint16_t _joy6_type;
  uint16_t joy6;

  typedef uint16_t _joy7_type;
  uint16_t joy7;

  typedef uint16_t _joy8_type;
  uint16_t joy8;

  typedef uint16_t _joy9_type;
  uint16_t joy9;

  typedef uint16_t _joy10_type;
  uint16_t joy10;


private:
  static const char* __s_getDataType_() { return "lowrabot/Myardu"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d80b48bb7b9460c12e4ef99c393aa5cb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint16  ab_dir\n\
uint16  kk_dir\n\
uint16  ab_val\n\
uint16  kk_val\n\
uint16  joy1\n\
uint16  joy2\n\
uint16  joy3\n\
uint16  joy4\n\
uint16  joy5\n\
uint16  joy6\n\
uint16  joy7\n\
uint16  joy8\n\
uint16  joy9\n\
uint16  joy10\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ab_dir);
    ros::serialization::serialize(stream, kk_dir);
    ros::serialization::serialize(stream, ab_val);
    ros::serialization::serialize(stream, kk_val);
    ros::serialization::serialize(stream, joy1);
    ros::serialization::serialize(stream, joy2);
    ros::serialization::serialize(stream, joy3);
    ros::serialization::serialize(stream, joy4);
    ros::serialization::serialize(stream, joy5);
    ros::serialization::serialize(stream, joy6);
    ros::serialization::serialize(stream, joy7);
    ros::serialization::serialize(stream, joy8);
    ros::serialization::serialize(stream, joy9);
    ros::serialization::serialize(stream, joy10);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ab_dir);
    ros::serialization::deserialize(stream, kk_dir);
    ros::serialization::deserialize(stream, ab_val);
    ros::serialization::deserialize(stream, kk_val);
    ros::serialization::deserialize(stream, joy1);
    ros::serialization::deserialize(stream, joy2);
    ros::serialization::deserialize(stream, joy3);
    ros::serialization::deserialize(stream, joy4);
    ros::serialization::deserialize(stream, joy5);
    ros::serialization::deserialize(stream, joy6);
    ros::serialization::deserialize(stream, joy7);
    ros::serialization::deserialize(stream, joy8);
    ros::serialization::deserialize(stream, joy9);
    ros::serialization::deserialize(stream, joy10);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ab_dir);
    size += ros::serialization::serializationLength(kk_dir);
    size += ros::serialization::serializationLength(ab_val);
    size += ros::serialization::serializationLength(kk_val);
    size += ros::serialization::serializationLength(joy1);
    size += ros::serialization::serializationLength(joy2);
    size += ros::serialization::serializationLength(joy3);
    size += ros::serialization::serializationLength(joy4);
    size += ros::serialization::serializationLength(joy5);
    size += ros::serialization::serializationLength(joy6);
    size += ros::serialization::serializationLength(joy7);
    size += ros::serialization::serializationLength(joy8);
    size += ros::serialization::serializationLength(joy9);
    size += ros::serialization::serializationLength(joy10);
    return size;
  }

  typedef boost::shared_ptr< ::lowrabot::Myardu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lowrabot::Myardu_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Myardu
typedef  ::lowrabot::Myardu_<std::allocator<void> > Myardu;

typedef boost::shared_ptr< ::lowrabot::Myardu> MyarduPtr;
typedef boost::shared_ptr< ::lowrabot::Myardu const> MyarduConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lowrabot::Myardu_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lowrabot::Myardu_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lowrabot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lowrabot::Myardu_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lowrabot::Myardu_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lowrabot::Myardu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d80b48bb7b9460c12e4ef99c393aa5cb";
  }

  static const char* value(const  ::lowrabot::Myardu_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd80b48bb7b9460c1ULL;
  static const uint64_t static_value2 = 0x2e4ef99c393aa5cbULL;
};

template<class ContainerAllocator>
struct DataType< ::lowrabot::Myardu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lowrabot/Myardu";
  }

  static const char* value(const  ::lowrabot::Myardu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lowrabot::Myardu_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16  ab_dir\n\
uint16  kk_dir\n\
uint16  ab_val\n\
uint16  kk_val\n\
uint16  joy1\n\
uint16  joy2\n\
uint16  joy3\n\
uint16  joy4\n\
uint16  joy5\n\
uint16  joy6\n\
uint16  joy7\n\
uint16  joy8\n\
uint16  joy9\n\
uint16  joy10\n\
\n\
";
  }

  static const char* value(const  ::lowrabot::Myardu_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lowrabot::Myardu_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lowrabot::Myardu_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ab_dir);
    stream.next(m.kk_dir);
    stream.next(m.ab_val);
    stream.next(m.kk_val);
    stream.next(m.joy1);
    stream.next(m.joy2);
    stream.next(m.joy3);
    stream.next(m.joy4);
    stream.next(m.joy5);
    stream.next(m.joy6);
    stream.next(m.joy7);
    stream.next(m.joy8);
    stream.next(m.joy9);
    stream.next(m.joy10);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Myardu_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lowrabot::Myardu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lowrabot::Myardu_<ContainerAllocator> & v) 
  {
    s << indent << "ab_dir: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ab_dir);
    s << indent << "kk_dir: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.kk_dir);
    s << indent << "ab_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ab_val);
    s << indent << "kk_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.kk_val);
    s << indent << "joy1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy1);
    s << indent << "joy2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy2);
    s << indent << "joy3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy3);
    s << indent << "joy4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy4);
    s << indent << "joy5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy5);
    s << indent << "joy6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy6);
    s << indent << "joy7: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy7);
    s << indent << "joy8: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy8);
    s << indent << "joy9: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy9);
    s << indent << "joy10: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.joy10);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LOWRABOT_MESSAGE_MYARDU_H

